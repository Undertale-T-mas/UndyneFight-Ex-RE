using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using UndyneFight_Ex;
using UndyneFight_Ex.Entities;
using UndyneFight_Ex.IO;
using UndyneFight_Ex.SongSystem;
using static UndyneFight_Ex.Entities.SimplifiedEasing;
using static UndyneFight_Ex.Fight.Functions;
using static UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders;
using static UndyneFight_Ex.FightResources;
using V = Microsoft.Xna.Framework.Vector2;

namespace Rhythm_Recall.Waves
{
    internal class Song_That_Might_Play_When_You_Fight_Sans : IChampionShip
    {
        Dictionary<string, Difficulty> dif = new();
        public Song_That_Might_Play_When_You_Fight_Sans()
        {
            dif.Add("Div.2", Difficulty.Normal);
            dif.Add("Div.1", Difficulty.Hard);
        }
        public IWaveSet GameContent => new Project();
        public Dictionary<string, Difficulty> DifficultyPanel => dif;
        class Project : WaveConstructor, IWaveSet
        {
            public Project() : base(62.5f / (120f / 60f)) { }
            public string Music => "Song That Might Play When You Fight Sans";
            public string FightName => "Song That Might Play When You Fight Sans";
            public SongInformation Attributes => new Information();
            class Information : SongInformation
            {
                public override string SongAuthor => "TobyFox";
                public override string BarrageAuthor => "Tlott!Sans";
                public override string AttributeAuthor => "Papyrus's SOUL";
                public override Dictionary<Difficulty, float> CompleteDifficulty => new(
                new KeyValuePair<Difficulty, float>[]
                {
                    new(Difficulty.Hard,14f),
                    new(Difficulty.Normal,14f),
                }
                );
                public override Dictionary<Difficulty, float> ComplexDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {
                        new(Difficulty.Hard,14.5f),
                        new(Difficulty.Normal,12f),
                    }
                    );
                public override Dictionary<Difficulty, float> APDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {
                        new(Difficulty.Hard,16.5f),
                    new(Difficulty.Normal,12f),
                    }
                    );
            }
            bool jump = false;
            float T(float beat)
            {
                return BeatTime(beat);
            }
            public void Start()
            {
                InstantSetBox(240, 650, 490);
                GametimeDelta = -0.5f;
                TP(320, 240);
                SetSoul(1);
                Settings.GreenTap = true;
                ScreenDrawing.ScreenAngle = 180;
                if (jump)
                {
                    float beat = 48f;
                    GametimeDelta = T(beat) - 3.5f;
                    PlayOffset = T(beat);
                    ScreenDrawing.ScreenAngle = 0;
                    InstantSetBox(240, 84, 84);
                }
            }
            public void Easy()
            {
                throw new NotImplementedException();
            }

            public void Extreme()
            {
                throw new NotImplementedException();
            }

            public void ExtremePlus()
            {
                throw new NotImplementedException();
            }

            public void Hard()
            {
                if(InBeat(0))
                {
                    Arrow.UnitEasing l = new();
                    l.ApplyTime = T(0.75f);
                    l.RotationEase = LinkEase(Stable(0,180),EaseOut(T(0.75f),180,EaseState.Cubic));
                    l.TagApply("L");
                    
                    RegisterFunctionOnce("Start", () =>
                    {
                        var r = LinkEase(
                            Stable(0, 180),
                            EaseInOut(T(3.5f),180, 180 + 720-180, EaseState.Quad));
                        RunEase((s) =>
                        {
                            ScreenDrawing.ScreenAngle = s;
                        },r);
                        var r1 = LinkEase(
                            Stable(0, new V(650,490)),
                            EaseInOut(T(3.5f), new V(650, 490), new V(84, 84), EaseState.Quad));
                        RunEase((s) =>
                        {
                            InstantSetBox(240,s.X,s.Y);
                        }, r1);
                    });
                    CreateChart(0, T(1), 6.5f, new string[]
                    {
                        "Start","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   

                        "","","","",   "(R)(R1)","","","",
                        "(R)(R1)","","","",   "(R)(R1)","","","",
                        "R","","R1","",   "R","","R1","",
                        "R","","R1","",   "","","R1","",

                        "+21","","+21","",   "","","","",
                        "R","","+2","",   "+2","","","",
                        "R","","+2","",   "(R1)","","+11","",
                        "+11","","(+11)","",   "-1","","-1","",

                        "-1","","-1","",   "","","","",
                        "R","","+1","",   "-1","","","",
                        "R1","","+11","",   "-11","","+1","",
                        "+1","","+1","",   "","","R1","",
                        //
                        "+11","","-11","",   "","","","",
                        "R","","-1","",   "+1","","","",
                        "R1","","-11","",   "R","","+1","",
                        "R1","","-11","",   "R","","+1","",

                        "R1","","-11","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                    CreateChart(0, T(1), 6.5f, new string[]
                    {
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "(*$2)","","","",
                        "","","(*$0@L)","",   "","","","",

                        "(*$21@L)","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "(*$2)","","","",
                        "","","(*$0@L)","",   "","","","",

                        "(*$21@L)","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                }
                if (InBeat(16))
                {
                    CreateChart(T(4.5f), T(1), 6.5f, new string[]
                    {
                        "*N11","","*N11","",   "*N11","","","",
                        "*N11","","*N11","",   "*N11","","*N11","",
                        "*N11","","*N11","",   "","","*N11","",
                        "*N11","","","",   "","","","",

                        "*N3","","*N3","",   "*N3","","","",
                        "*N3","","*N3","",   "*N3","","*N3","",
                        "*N3","","*N3","",   "","","*N3","",
                        "*N3","","","",   "","","","",

                        "*N11","","*N11","",   "*N11","","","",
                        "*N11","","*N11","",   "*N11","","*N11","",
                        "*N11","","*N11","",   "","","*N11","",
                        "*N11","","","",   "","","","",

                        "*N3","","*N3","",   "*N3","","","",
                        "*N3","","*N3","",   "*N3","","*N3","",
                        "*N3","","*N3","",   "","","*N3","",
                        "*N3","","","",   "","","","",

                        //
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                    CreateChart(T(4f), T(1), 6.5f, new string[]
                    {
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",

                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",

                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",

                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                    });
                }
                if (InBeat(32))
                {
                    Arrow.UnitEasing l = new();
                    l.ApplyTime = T(0.75f);
                    l.RotationEase = LinkEase(Stable(0, 180), EaseOut(T(0.75f), 180, EaseState.Cubic));
                    l.TagApply("L");

                    RegisterFunctionOnce("Start", () =>
                    {
                        var r = LinkEase(
                            Stable(0, 180),
                            EaseInOut(T(3.5f), 180, 180 + 720 - 180, EaseState.Quad));
                        RunEase((s) =>
                        {
                            ScreenDrawing.ScreenAngle = s;
                        }, r);
                        var r1 = LinkEase(
                            Stable(0, new V(650, 490)),
                            EaseInOut(T(3.5f), new V(650, 490), new V(84, 84), EaseState.Quad));
                        RunEase((s) =>
                        {
                            InstantSetBox(240, s.X, s.Y);
                        }, r1);
                    });
                    CreateChart(T(3.5f), T(1), 6.5f, new string[]
                    {
                        "","","","",   "(R)(R1)","","","",
                        "(R)(R1)","","","",   "(R)(R1)","","","",
                        "R","","R1","",   "R","","R1","",
                        "R","","R1","",   "","","R1","",

                        "+21","","+21","",   "","","","",
                        "R","","+2","",   "+2","","","",
                        "R","","+2","",   "(R1)","","+11","",
                        "+11","","(+11)","",   "-1","","-1","",

                        "-1","","-1","",   "","","","",
                        "R","","+1","",   "-1","","","",
                        "R1","","+11","",   "-11","","+1","",
                        "+1","","+1","",   "","","R1","",
                        //
                        "+11","","-11","",   "","","","",
                        "R","","-1","",   "+1","","","",
                        "R1","","-11","",   "R","","+1","",
                        "R1","","-11","",   "R","","+1","",

                        "R1","","-11","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                    CreateChart(T(3.5f), T(1), 6.5f, new string[]
                    {
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "(*$2)","","","",
                        "","","(*$0@L)","",   "","","","",

                        "(*$21@L)","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "(*$2)","","","",
                        "","","(*$0@L)","",   "","","","",

                        "(*$21@L)","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                }
                if (InBeat(48))
                {
                    CreateChart(T(4.5f), T(1), 6.5f, new string[]
                    {
                        "*N11","","*N11","",   "*N11","","","",
                        "*N11","","*N11","",   "*N11","","*N11","",
                        "*N11","","*N11","",   "","","*N11","",
                        "*N11","","","",   "","","","",

                        "*N3","","*N3","",   "*N3","","","",
                        "*N3","","*N3","",   "*N3","","*N3","",
                        "*N3","","*N3","",   "","","*N3","",
                        "*N3","","","",   "","","","",

                        "*N11","","*N11","",   "*N11","","","",
                        "*N11","","*N11","",   "*N11","","*N11","",
                        "*N11","","*N11","",   "","","*N11","",
                        "*N11","","","",   "","","","",

                        "*N3","","*N3","",   "*N3","","","",
                        "*N3","","*N3","",   "*N3","","*N3","",
                        "*N3","","*N3","",   "","","*N3","",
                        "*N3","","","",   "","","","",

                        //
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                    });
                    CreateChart(T(4f), T(1), 6.5f, new string[]
                    {
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",

                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",

                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",
                        "(~$11)","","","",   "(~$11)","","","",

                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "(~$3)","","","",
                        "(~$3)","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                    });
                }
            }

            public void Noob()
            {
                throw new NotImplementedException();
            }

            public void Normal()
            {
                
            }
            
        }
    }
}
