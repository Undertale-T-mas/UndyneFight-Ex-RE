using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using UndyneFight_Ex;
using UndyneFight_Ex.Entities;
using UndyneFight_Ex.IO;
using UndyneFight_Ex.SongSystem;
using static UndyneFight_Ex.Entities.SimplifiedEasing;
using static UndyneFight_Ex.Fight.Functions;
using static UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders;
using static UndyneFight_Ex.FightResources;
using V = Microsoft.Xna.Framework.Vector2;

namespace Rhythm_Recall.Waves
{
    internal class The_World_Revolving : IChampionShip
    {
        Dictionary<string, Difficulty> dif = new();
        public The_World_Revolving()
        {
            dif.Add("Div.3", Difficulty.Easy);
            dif.Add("Div.2", Difficulty.Normal);
            dif.Add("Div.1", Difficulty.Extreme);
        }
        public IWaveSet GameContent => new Project();
        public Dictionary<string, Difficulty> DifficultyPanel => dif;
        class Project : WaveConstructor,IWaveSet
        {
            public Project() : base(62.5f / (190f / 60f)) { }
            public string Music => "The World Revolving";

            public string FightName => "The World Revolving";

            public SongInformation Attributes => new Information();
            class Information : SongInformation
            {
                public override string SongAuthor => "TobyFox";
                public override string BarrageAuthor => "Tlottgodinf";
                public override string AttributeAuthor => "Tlottgodinf";
                public override Dictionary<Difficulty, float> CompleteDifficulty => new(
                new KeyValuePair<Difficulty, float>[]
                {   
                    new(Difficulty.Easy,4.5f),
                    new(Difficulty.Normal,12.5f),
                    new(Difficulty.Extreme,18.2f)
                }
                );
                public override Dictionary<Difficulty, float> ComplexDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {   
                        new(Difficulty.Easy,4.5f),
                        new(Difficulty.Normal,12.5f),
                    new(Difficulty.Extreme,18.2f)
                    }
                    );
                public override Dictionary<Difficulty, float> APDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    { 
                        new(Difficulty.Easy,9f),
                    new(Difficulty.Normal,16f),
                    new(Difficulty.Extreme,20.9f)
                    }
                    );
            }
            #region disused
            public void ExtremePlus()
            {
                throw new NotImplementedException();
            }

            public void Hard()
            {
                throw new NotImplementedException();
            }

            public void Noob()
            {
                throw new NotImplementedException();
            }
            #endregion
            public void Extreme()
             {
                if (InBeat(0.06f))
                {
                    Effect1();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                            //1
                            "($0'0.85)($01'0.85)", "", "$0'0.85", "",     "($0'0.85)($01'0.85)", "", "$0'0.85", "",
                            "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",     "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",
                            "(D'0.85)(+01'0.85)", "", "R'0.85", "",     "(D'0.85)(+01'0.85)", "", "R'0.85", "",
                            "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",     "(d'1.1)(+01'1.1)", "", "(n0'1.1)(+01'1.1)", "",

                            //2
                            "#1.5#$0", "", "", "",       "", "", "#1.5#$01", "",       
                            "", "", "", "",       "#1#$2", "", "", "",
                            "#1#$21", "", "", "",       "#1#$0", "", "", "",
                            "#1#$01", "", "", "",       "#0.5#$2", "", "", "",      

                            //3
                            "(n2'0.85)(+01'0.85)", "", "R'0.85", "",     "(d0'0.85)(+01'0.85)", "", "R'0.85", "",
                            "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",     "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",
                            "(D'0.85)(+01'0.85)", "", "R'0.85", "",     "(D'0.85)(+01'0.85)", "", "R'0.85", "",
                            "(d'1.1)(+01'1.1)", "", "(d'1.1)(+01'1.1)", "",     "(d'1.1)(+01'1.1)", "", "(n0'1.1)(+01'1.1)", "",
                            
                            //4 
                            "#1.5#$0", "", "", "",       "", "", "#1.5#$01", "",
                            "", "", "", "",       "#1#$2", "", "", "",
                            "#1.5#$31", "", "", "",       "", "", "$0", "$1",
                            "#1.5#$2", "", "", "",       "", "", "", "",       
                    });
                }
                if (InBeat(32 - 4))
                {
                    ArrowEase.UnitRotation("RL", EaseOut(BeatTime(4), 80, 0, EaseState.Sine));
                    ArrowEase.UnitRotation("RR", EaseOut(BeatTime(4), -80, 0, EaseState.Sine));
                    CreateChart(BeatTime(0), BeatTime(2), 5.2f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "($0'1.1)($21)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "n11'1.1", "",
                        //2  
                            "#1.5#$1", "", "", "",       "", "", "#1.5#$11", "",
                            "", "", "", "",       "#1#$3", "", "", "",
                            "#1#$31", "", "", "",       "#1#$1", "", "", "",
                            "#1#$11", "", "", "",       "#0.5#$3", "", "", "",      
                        //3 
                            "($0'1.1)($21)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "$3'1.1", "",
                            "($0'1.1)(d1)", "", "$1'1.1", "",       "($2'1.1)(d1)", "", "n21'1.1", "",
                        //4.1
                            "$0", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",       "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",
                            "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",       "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_$0@RL",
                            "$2", "~_!$2@RL", "~_!$2@RR", "~_!$2@RL",       "~_!$2@RR", "~_!$2@RL", "~_!$2@RR", "~_!$2@RL",
                            "~_!$2@RR", "~_!$2@RL", "~_!$2@RR", "~_!$2@RL",     "", "", "", "",

                            "<<8",

                        //4.2
                            "$21", "~_!$21@RL", "~_!$21@RR", "~_!$21@RL",       "~_!$21@RR", "~_!$21@RL", "$31", "~_!$31@RL",
                            "~_!$31@RR", "~_!$31@RL", "~_!$31@RR", "~_!$31@RL",       "$11", "~_!$11@RL", "~_!$11@RR", "~_!$11@RL",
                            "$01", "~_!$01@RL", "~_!$01@RR", "~_!$01@RL",       "~_!$01@RR", "~_!$01@RL",  "$11'1.4", "$01'1.4",
                            "$11'1.4", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(64-4))
                {
                    Effect2();
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "(R)(+0)", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",

                            "*R", "+21", "*+2", "+21",       "*+2", "", "*+0", "",
                            "*R", "+21", "*+2", "+21",       "*+2", "", "*+0", "",
                            "*R1", "+2", "*+21", "+2",       "*+21", "", "*+01", "",
                            "*R1", "+2", "*+21", "+2",       "*+21", "", "*+01", "",

                            "(R)(+0)", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",

                            "*R", "+21", "*+2", "+21",       "*+2", "", "*+0", "",
                            "*R", "+21", "*+2", "+21",       "*+2", "", "*+0", "",
                            "*R1", "+2", "*+21", "+2",       "*+21", "", "*+01", "",
                            "*R1", "+2", "*+21", "+2",       "*+21", "", "*+01", "",

                            "(R)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",

                            "*R", "*+21", "*+2", "*+21",       "*+2", "", "*+0", "",
                            "*R", "*+21", "*+2", "*+21",       "*+2", "", "*+0", "",
                            "*R1", "*+2", "*+21", "*+2",       "*+21", "", "*+01", "",
                            "*R1", "*+2", "*+21", "*+2",       "*+21", "", "*+01", "",

                            "(R)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",

                            "*R", "*+21", "*+2", "*+21",       "*+2", "", "*+0", "",
                            "*R", "*+21", "*+2", "*+21",       "*+2", "", "*+0", "",
                            "*R1", "*+2", "*+21", "*+2",       "*+21", "", "*+01", "",
                            "*R1", "*+2", "*+21", "*+2",       "*+21", "", "*+01", "",

                    });
                }
                if (InBeat(128 - 4))
                {
                    Effect3();
                    Effect4();
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",

                            "(R)(D1)", "","!!6/3",$"${val1}", $"${val2}1",  $"${val1}",$"${val2}1", "","R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",

                            "(R)(D1)", "","!!6/3",$"${val1}", $"${val2}1",  $"${val1}",$"${val2}1", "","R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "", "",       "", "", "", "",

                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "", "",       "(R)(D1)", "", "", "",
                            "(R)(D1)", "", "", "",       "", "", "R1", "+3",
                            "+11", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(160 - 4))
                {
                    Effect4();
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",

                            "(R)(D1)", "","!!6/3",$"${val1}", $"${val2}1",  $"${val1}",$"${val2}1", "","R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",

                            "(R)(D1)", "","!!6/3",$"${val1}", $"${val2}1",  $"${val1}",$"${val2}1", "","R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "", "",       "", "", "", "",

                            "(R)(D1)", "", "R", "",       "R1", "", "R", "",
                            "(R)(D1)", "", "", "",       "(R)(D1)", "", "", "",
                            "(R)(D1)", "", "", "",       "", "", "R1", "+3",
                            "+11", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(192 - 4))
                {
                    Effect5();
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",
                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",

                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",
                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",

                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",
                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",

                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",
                            "R", "+0", "+0", "+1",       "+1", "", "D", "",
                            "R1", "+01", "+01", "+11",       "+11", "", "D1", "",
                    });
                }
                if (InBeat(224 - 4))
                {
                    
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",
                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",

                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",
                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",

                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",
                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",

                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",
                            "R", "-0", "-0", "-1",       "-1", "", "D", "",
                            "R1", "-01", "-01", "-11",       "-11", "", "D1", "",
                    });
                }
                if (InBeat(256 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    int val3 = Rand(0, 3);
                    int val4 = Rand(0, 3);
                    int val5 = Rand(0, 3);
                    int val6 = Rand(0, 3);
                    int val7 = Rand(0, 3);
                    int val8 = Rand(0, 3);
                    int val9 = Rand(0, 3);
                    int vala = Rand(0, 3);
                    int valb = Rand(0, 3);
                    int valc = Rand(0, 3);
                    CreateChart(BeatTime(0), BeatTime(2), 6.7f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            $"(#3#${val1}1)(N{val1})", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(${val1}1)(N{val1})", "", $"N{val2}", "",
                            $"(#1#${val2}1)(N{val2})", "", $"N{val2}", "",       $"(${val2}1)(N{val2})", "", $"N{val3}", "",
                            $"(#1#${val3}1)(N{val3})", "", $"N{val3}", "",       $"N{val3}", "", $"(${val3}1)(N{val3})", "",

                            $"(#3#${val4}1)(N{val4})", "", $"N{val4}", "",       $"N{val4}", "", $"N{val4}", "",
                            $"N{val4}", "", $"N{val4}", "",       $"(${val4}1)(N{val4})", "", $"N{val5}", "",
                            $"(#1#${val5}1)(N{val5})", "", $"N{val5}", "",       $"(${val5}1)(N{val5})", "", $"N{val6}", "",
                            $"(#1#${val6}1)(N{val6})", "", $"N{val6}", "",       $"(${val6}1)(N{val6})", "", $"(N{val7})", "",

                            $"(#3#${val7}1)(N{val7})", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(${val7}1)(N{val7})", "", $"N{val8}", "",
                            $"(#1#${val8}1)(N{val8})", "", $"N{val8}", "",       $"(${val8}1)(N{val8})", "", $"N{val9}", "",
                            $"(#1#${val9}1)(N{val9})", "", $"N{val9}", "",       $"N{val9}", "", $"(${val1}1)(N{val1})", "",

                             $"(#3#${val1}1)(N{val1})", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(${val1}1)(N{val1})", "", $"N{val2}", "",
                            $"(#1#${val2}1)(N{val2})", "", $"N{val2}", "",       $"(${val2}1)(N{val2})", "", $"N{val3}", "",
                            $"(#1#${val3}1)(N{val3})", "", $"N{val3}", "",       $"(${val3}1)(N{val3})", "", $"(N{val4})", "",

                            $"(#3#${val7}1)(N{val7})", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(${val7}1)(N{val7})", "", $"N{val8}", "",
                            $"(#1#${val8}1)(N{val8})", "", $"N{val8}", "",       $"(${val8}1)(N{val8})", "", $"N{val9}", "",
                            $"(#1#${val9}1)(N{val9})", "", $"N{val9}", "",       $"N{val9}", "", $"(${val9}1)(N{val9})", "",

                            $"(#3#${val7}1)(N{val7})", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(${val7}1)(N{val7})", "", $"N{val8}", "",
                            $"(#1#${val8}1)(N{val8})", "", $"N{val8}", "",       $"(${val8}1)(N{val8})", "", $"N{val9}", "",
                            $"(#1#${val9}1)(N{val9})", "", $"N{val9}", "",        $"(${val9}1)(N{val9})", "", $"N{val4}", "",

                            $"(#1#${val4}1)(N{val4})", "", $"N{val4}", "",       $"N{val4}", "", $"N{val4}", "",
                            $"N{val4}", "", $"N{val4}", "",       $"(${val4}1)(N{val4})", "", $"N{val5}", "",
                            $"(#1#${val5}1)(N{val5})", "", $"N{val5}", "",       $"(${val5}1)(N{val5})", "", $"N{val6}", "",
                            $"(#1#${val6}1)(N{val6})", "", $"N{val6}", "",       $"N{val6}", "", $"(${val6}1)(N{val6})", "",

                             $"(#3#${val1}1)(N{val1})", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(${val1}1)(N{val1})", "", "", "",
                            $"R", "", "", "",       $"R", "", $"", "",
                            $"R", "", "", "",       $"R", "", $"", "",
                    });
                }
            }
            public void Normal()
            {
                if (InBeat(0.06f))
                {
                    Effect1();
                    CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                            //1
                            "($0'0.7)", "", "$0'0.7", "",     "($0'0.7)", "", "$0'0.7", "",
                            "(R'1.2)", "", "(R'1.2)", "",     "(R'1.2)", "", "(R'1.2)", "",
                            "R'0.7", "", "R'0.7", "",     "R'0.7", "", "R'0.7", "",
                            "(R'1.2)", "", "(R'1.2)", "",     "(R'1.2)", "", "(n0'1.2)", "",

                            //2
                            "#1.5#$0", "", "", "",       "", "", "#1.5#$01", "",
                            "", "", "", "",       "#1#$2", "", "", "",
                            "#1#$21", "", "", "",       "#1#$0", "", "", "",
                            "#1#$01", "", "", "",       "#0.5#$2", "", "", "",      

                            //3
                            "R'0.7", "", "R'0.7", "",     "R'0.7", "", "R'0.7", "",
                            "(R'1.2)", "", "(R'1.2)", "",     "(R'1.2)", "", "(R'1.2)", "",
                            "R'0.7", "", "R'0.7", "",     "R'0.7", "", "R'0.7", "",
                            "(R'1.2)", "", "(R'1.2)", "",     "(R'1.2)", "", "(n0'1.2)", "",
                            
                            //4 
                            "#1.5#$0", "", "", "",       "", "", "#1.5#$01", "",
                            "", "", "", "",       "#1#$2", "", "", "",
                            "#1.5#$31", "", "", "",       "", "", "$2", "$2",
                            "#1.5#$2", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(32 - 4))
                {
                    ArrowEase.UnitRotation("RL", EaseOut(BeatTime(4), 80, 0, EaseState.Sine));
                    ArrowEase.UnitRotation("RR", EaseOut(BeatTime(4), -80, 0, EaseState.Sine));
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "(R'1.2)(+01)", "", "", "",       "(R'1.2)(+01)", "", "", "",
                            "(R'1.2)(+01)", "", "", "",       "(R'1.2)(+01)", "", "", "",
                            "(R'1.2)(+01)", "", "", "",       "(R'1.2)(+01)", "", "", "",
                            "(R'1.2)(+01)", "", "", "",       "(R'1.2)(+01)", "", "", "",
                        //2  
                            "#1.5#$1", "", "", "",       "", "", "#1.5#$11", "",
                            "", "", "", "",       "#1#$3", "", "", "",
                            "#1#$31", "", "", "",       "#1#$1", "", "", "",
                            "#1#$11", "", "", "",       "#0.5#$3", "", "", "",      
                        //3 
                            "(R1'1.2)(+0)", "", "", "",       "(R1'1.2)(+0)", "", "", "",
                            "(R1'1.2)(+0)", "", "", "",       "(R1'1.2)(+0)", "", "", "",
                            "(R1'1.2)(+0)", "", "", "",       "(R1'1.2)(+0)", "", "", "",
                            "(R1'1.2)(+0)", "", "", "",       "(R1'1.2)(+0)", "", "", "",
                        //4.1
                            "$0", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",       "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",
                            "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",       "~_!$0@RR", "~_!$0@RL", "~_!$0@RR", "~_$0@RL",
                            "$0", "~_!$0@RL", "~_!$0@RR", "~_!$0@RL",       "~_!$0@RR", "~_!$0@RL", "$0'1.4", "$0'1.4",
                            "$0'1.4", "", "", "",     "", "", "", "",

                            "<<8",

                        //4.2
                            "$21", "~_!$21@RL", "~_!$21@RR", "~_!$21@RL",       "~_!$21@RR", "~_!$21@RL", "$21", "~_!$21@RL",
                            "~_!$21@RR", "~_!$21@RL", "~_!$21@RR", "~_!$21@RL",       "$21", "~_!$21@RL", "~_!$21@RR", "~_!$21@RL",
                            "$21", "~_!$21@RL", "~_!$21@RR", "~_!$21@RL",       "~_!$21@RR", "~_!$21@RL",  "$21'1.4", "$21'1.4",
                            "$21'1.4", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(64 - 4))
                {
                    Effect2();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "(R)(+0)", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",

                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",

                            "(R)(+0)", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",

                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",

                            "(R)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",

                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",

                            "(R)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",
                            "(+1)(+01)", "", "", "",       "(+1)(+01)", "", "", "",

                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",
                            "R", "+21", "+2", "+01",       "+0", "", "+0", "",

                    });
                }
                if (InBeat(128 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    Effect3();
                    Effect4();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",

                            "(R1)", "","!!6/3",$"(${val1})(${val1}1)", $"${val1}1",  $"${val1}",$"${val1}1", "","R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",

                            "(R1)", "","!!6/3",$"${val2}(${val2}1)", $"${val2}1",  $"${val2}",$"${val2}1", "","R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "", "",       "", "", "", "",

                            "(R1)", "", "R", "",       "R1", "", "R", "",
                            "(R1)", "", "", "",       "(R1)", "", "", "",
                            "(R1)", "", "", "",       "", "", "R1", "+01",
                            "+01", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(160 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    Effect4();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                           "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",

                            "(R)", "","!!6/3",$"(${val1})(${val1}1)", $"${val1}1",  $"${val1}",$"${val1}1", "","R", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",

                            "(R)", "","!!6/3",$"${val2}(${val2}1)", $"${val2}1",  $"${val2}",$"${val2}1", "","R", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "", "",       "", "", "", "",

                            "(R)", "", "R1", "",       "R", "", "R1", "",
                            "(R)", "", "", "",       "(R)", "", "", "",
                            "(R)", "", "", "",       "", "", "R", "+0",
                            "+0", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(192 - 4))
                {
                    Effect5();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",

                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                    });
                }
                if (InBeat(224 - 4))
                {
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",

                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+21)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+21)+0", "", "+01", "",
                    });
                }
                if (InBeat(256 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    int val3 = Rand(0, 3);
                    int val4 = Rand(0, 3);
                    int val5 = Rand(0, 3);
                    int val6 = Rand(0, 3);
                    int val7 = Rand(0, 3);
                    int val8 = Rand(0, 3);
                    int val9 = Rand(0, 3);
                    int vala = Rand(0, 3);
                    int valb = Rand(0, 3);
                    int valc = Rand(0, 3);
                    CreateChart(BeatTime(0), BeatTime(2), 6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            $"(N{val1})(+0)", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(N{val1})(+0)", "", $"N{val2}", "",
                            $"(N{val2})(+0)", "", $"N{val2}", "",       $"(N{val2})(+0)", "", $"N{val3}", "",
                            $"(N{val3})(+0)", "", $"N{val3}", "",       $"N{val3}", "", $"(N{val3})(+0)", "",

                            $"(N{val4})(+0)", "", $"N{val4}", "",       $"N{val4}", "", $"N{val4}", "",
                            $"N{val4}", "", $"N{val4}", "",       $"(N{val4})(+0)", "", $"N{val5}", "",
                            $"(N{val5})(+0)", "", $"N{val5}", "",       $"(N{val5})(+0)", "", $"N{val6}", "",
                            $"(N{val6})(+0)", "", $"N{val6}", "",       $"(N{val6})(+0)", "", $"(N{val7})", "",

                            $"(N{val7})(+0)", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(N{val7})(+0)", "", $"N{val8}", "",
                            $"(N{val8})(+0)", "", $"N{val8}", "",       $"(N{val8})(+0)", "", $"N{val9}", "",
                            $"(N{val9})(+0)", "", $"N{val9}", "",       $"N{val9}", "", $"(N{val1})(+0)", "",

                            $"(N{val1})(+0)", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(N{val1})(+0)", "", $"N{val2}", "",
                            $"(N{val2})(+0)", "", $"N{val2}", "",       $"(N{val2})(+0)", "", $"N{val3}", "",
                            $"(N{val3})(+0)", "", $"N{val3}", "",       $"(N{val3})(+0)", "", $"(N{val4})", "",

                            $"(N{val7})(+0)", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(N{val7})(+0)", "", $"N{val8}", "",
                            $"(N{val8})(+0)", "", $"N{val8}", "",       $"(N{val8})(+0)", "", $"N{val9}", "",
                            $"(N{val9})(+0)", "", $"N{val9}", "",       $"N{val9}", "", $"(N{val9})(+0)", "",

                            $"(N{val7})(+0)", "", $"N{val7}", "",       $"N{val7}", "", $"(N{val7})", "",
                            $"N{val7}", "", $"N{val7}", "",       $"(N{val7})(+0)", "", $"N{val8}", "",
                            $"(N{val8})(+0)", "", $"N{val8}", "",       $"(N{val8})(+0)", "", $"N{val9}", "",
                            $"(N{val9})(+0)", "", $"N{val9}", "",        $"(N{val9})(+0)", "", $"N{val4}", "",

                            $"(N{val4})(+0)", "", $"N{val4}", "",       $"N{val4}", "", $"N{val4}", "",
                            $"N{val4}", "", $"N{val4}", "",       $"(N{val4})(+0)", "", $"N{val5}", "",
                            $"(N{val5})(+0)", "", $"N{val5}", "",       $"(N{val5})(+0)", "", $"N{val6}", "",
                            $"(N{val6})(+0)", "", $"N{val6}", "",       $"N{val6}", "", $"(N{val6})(+0)", "",

                             $"(N{val1})(+0)", "", $"N{val1}", "",       $"N{val1}", "", $"N{val1}", "",
                            $"N{val1}", "", $"N{val1}", "",       $"(N{val1})(+0)", "", "", "",
                            $"R", "", "", "",       $"R", "", "", "",
                            $"R", "", "", "",       $"R", "", "", "",
                    });
                }
            }
            public void Easy()
            {
                if (InBeat(0.06f))
                {
                    Effect1();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                            //1
                            "($0'0.7)", "", "", "",     "($0'0.7)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",

                            //2
                            "#3.5#$1", "", "", "",       "", "", "$31", "",
                            "", "", "", "",       "$31", "", "", "",
                            "$01", "", "", "",       "$11", "", "", "",
                            "$21", "", "", "",       "$31", "", "", "",      

                            //3
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            "(R'1.2)", "", "", "",     "(R'1.2)", "", "", "",
                            
                            //4 
                            "#3.5#$3", "", "", "",       "", "", "$11", "",
                            "", "", "", "",       "$11", "", "", "",
                            "$01", "", "", "",       "", "", "$21", "$21",
                            "$21", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(32 - 4))
                {
                    //ArrowEase.UnitRotation("RL", EaseOut(BeatTime(4), 80, 0, EaseState.Sine));
                    //ArrowEase.UnitRotation("RR", EaseOut(BeatTime(4), -80, 0, EaseState.Sine));
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "(R'1.2)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                        //2  
                            "#3.5#$1", "", "", "",       "", "", "$31", "",
                            "", "", "", "",       "$31", "", "", "",
                            "$01", "", "", "",       "$11", "", "", "",
                            "$21", "", "", "",       "$31", "", "", "",      
                        //3 
                            "(R'1.2)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                        //4.1
                            "#3.5#$3", "", "", "",       "", "", "$11", "",
                            "", "", "", "",       "$11", "", "", "",
                            "$01", "", "", "",       "", "", "$21", "$21",
                            "$21", "", "", "",       "", "", "", "",

                            "<<8",

                        //4.2
                    });
                }
                if (InBeat(64 - 4))
                {
                    Effect2();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1   
                            "(R)(+0)", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",
                            "+1", "", "", "",       "+1", "", "", "",

                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",

                            "(R)(+0)", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",
                            "+1", "", "", "",       "+0", "", "", "",

                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",

                            "(R)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",

                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",

                            "(R)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",
                            "(+1)", "", "", "",       "(+1)", "", "", "",

                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",
                            "D", "+0", "+0", "+0",       "+0", "", "+0", "",

                    });
                }
                if (InBeat(128 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    Effect3();
                    Effect4();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",

                            "(R)", "","!!6/3",$"(${val1})(${val1}1)", $"${val1}1",  $"${val1}",$"${val1}1", "","+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",

                            "(R)", "","!!6/3",$"${val2}(${val2}1)", $"${val2}1",  $"${val2}",$"${val2}1", "","+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "", "",       "", "", "", "",

                            "(R)", "", "R", "",       "R1", "", "R", "",
                            "(R)", "", "", "",       "(R1)", "", "", "",
                            "(R)", "", "", "",       "", "", "R", "+0",
                            "+0", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(160 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    Effect4();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                           "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",

                            "(R)", "","!!6/3",$"(${val1})(${val1}1)", $"${val1}1",  $"${val1}",$"${val1}1", "","+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",

                            "(R)", "","!!6/3",$"${val2}(${val2}1)", $"${val2}1",  $"${val2}",$"${val2}1", "","+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "+0", "",       "R", "", "+0", "",
                            "(R)", "", "", "",       "", "", "", "",

                            "(R)", "", "R", "",       "R1", "", "R", "",
                            "(R)", "", "", "",       "(R1)", "", "", "",
                            "(R)", "", "", "",       "", "", "R", "+0",
                            "+0", "", "", "",       "", "", "", "",
                    });
                }
                if (InBeat(192 - 4))
                {
                    Effect5();
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",

                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                    });
                }
                if (InBeat(224 - 4))
                {
                    CreateChart(BeatTime(0), BeatTime(2), 5f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",

                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",
                            "(R)(+01)", "+0", "+0", "+0",       "(+01)(+0)", "", "+0", "",

                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                            "(R)(+01)", "+01", "+0", "+01",       "(+01)+0", "", "+01", "",
                    });
                }
                if (InBeat(256 - 4))
                {
                    int val1 = Rand(0, 3);
                    int val2 = Rand(0, 3);
                    int val3 = Rand(0, 3);
                    int val4 = Rand(0, 3);
                    int val5 = Rand(0, 3);
                    int val6 = Rand(0, 3);
                    int val7 = Rand(0, 3);
                    int val8 = Rand(0, 3);
                    int val9 = Rand(0, 3);
                    int vala = Rand(0, 3);
                    int valb = Rand(0, 3);
                    int valc = Rand(0, 3);
                    CreateChart(BeatTime(0), BeatTime(2), 6f, new string[]
                    {
                        //pre   
                            "", "", "", "",       "", "", "", "",
                            "", "", "", "",       "", "", "", "",
                        //1
                            $"(${val1})(+0)", "", $"${val1}", "",       $"${val1}", "", $"${val1}", "",
                            $"${val1}", "", $"${val1}", "",       $"(${val1})(+0)", "", $"${val2}", "",
                            $"(${val2})(+0)", "", $"${val2}", "",       $"(${val2})(+0)", "", $"${val3}", "",
                            $"(${val3})(+0)", "", $"${val3}", "",       $"${val3}", "", $"(${val3})(+0)", "",

                            $"(${val4})(+0)", "", $"${val4}", "",       $"${val4}", "", $"${val4}", "",
                            $"${val4}", "", $"${val4}", "",       $"(${val4})(+0)", "", $"${val5}", "",
                            $"(${val5})(+0)", "", $"${val5}", "",       $"(${val5})(+0)", "", $"${val6}", "",
                            $"(${val6})(+0)", "", $"${val6}", "",       $"(${val6})(+0)", "", $"(${val7})", "",

                            $"(${val7})(+0)", "", $"${val7}", "",       $"${val7}", "", $"(${val7})", "",
                            $"${val7}", "", $"${val7}", "",       $"(${val7})(+0)", "", $"${val8}", "",
                            $"(${val8})(+0)", "", $"${val8}", "",       $"(${val8})(+0)", "", $"${val9}", "",
                            $"(${val9})(+0)", "", $"${val9}", "",       $"${val9}", "", $"(${val1})(+0)", "",

                            $"(${val1})(+0)", "", $"${val1}", "",       $"${val1}", "", $"${val1}", "",
                            $"${val1}", "", $"${val1}", "",       $"(${val1})(+0)", "", $"${val2}", "",
                            $"(${val2})(+0)", "", $"${val2}", "",       $"(${val2})(+0)", "", $"${val3}", "",
                            $"(${val3})(+0)", "", $"${val3}", "",       $"(${val3})(+0)", "", $"(${val4})", "",

                            $"(${val7})(+0)", "", $"${val7}", "",       $"${val7}", "", $"(${val7})", "",
                            $"${val7}", "", $"${val7}", "",       $"(${val7})(+0)", "", $"${val8}", "",
                            $"(${val8})(+0)", "", $"${val8}", "",       $"(${val8})(+0)", "", $"${val9}", "",
                            $"(${val9})(+0)", "", $"${val9}", "",       $"${val9}", "", $"(${val9})(+0)", "",

                            $"(${val7})(+0)", "", $"${val7}", "",       $"${val7}", "", $"(${val7})", "",
                            $"${val7}", "", $"${val7}", "",       $"(${val7})(+0)", "", $"${val8}", "",
                            $"(${val8})(+0)", "", $"${val8}", "",       $"(${val8})(+0)", "", $"${val9}", "",
                            $"(${val9})(+0)", "", $"${val9}", "",        $"(${val9})(+0)", "", $"${val4}", "",

                            $"(${val4})(+0)", "", $"${val4}", "",       $"${val4}", "", $"${val4}", "",
                            $"${val4}", "", $"${val4}", "",       $"(${val4})(+0)", "", $"${val5}", "",
                            $"(${val5})(+0)", "", $"${val5}", "",       $"(${val5})(+0)", "", $"${val6}", "",
                            $"(${val6})(+0)", "", $"${val6}", "",       $"${val6}", "", $"(${val6})(+0)", "",

                             $"(${val1})(+0)", "", $"${val1}", "",       $"${val1}", "", $"${val1}", "",
                            $"${val1}", "", $"${val1}", "",       $"(${val1})(+0)", "", "", "",
                            $"R", "", "", "",       $"R", "", "", "",
                            $"R", "", "", "",       $"R", "", "", "",
                    });
                }
            }
            void Effect1()
            {
                Vector2 ct = new(320, 240);
                RegisterFunctionOnce("MoveBox1", () =>
                {
                    RunEase((s) =>
                    {
                        InstantSetBox(s, 84, 84);
                        InstantTP(s);
                    },Stable(0,new Vector2(320,240)),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0],0),EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0,-Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0, Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0, Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], -Arguments[0]), EaseState.Cubic)
                      );
                });
                RegisterFunctionOnce("MoveBox2", () =>
                {
                    RunEase((s) =>
                    {
                        InstantSetBox(s, 84, 84);
                        InstantTP(s);
                    }, Stable(0, new Vector2(320, 240)),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0, Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0, -Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(0, -Arguments[0]), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(Arguments[0], 0), EaseState.Cubic),
                      EaseOut(BeatTime(1), new Vector2(-Arguments[0], Arguments[0]), EaseState.Cubic)
                      );
                });
                RegisterFunctionOnce("MoveLine", () =>
                {
                    Line l = new(
                        LinkEase(Stable(0, new Vector2(Arguments[0], 240)), EaseOut(BeatTime(1), new Vector2(Arguments[1],0), EaseState.Quad)),
                        Stable(0,90)
                        );
                    l.AlphaDecrease(BeatTime(1.5f));
                    CreateEntity(l);
                });
                CreateChart(BeatTime(0), BeatTime(2), 5.6f, new string[]
                    {
                        "<24>MoveBox1","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "<200,-90>MoveLine","","","",
                        "","","","",   "<440,90>MoveLine","","","",
                        "","","","",   "<200,-90>MoveLine","","","",
                        "","","","",   "<440,90>MoveLine","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        //
                        "","","","",   "(<0,4,0.95>SA)","","","",
                        "","","","",   "<4,0,0.95>SA","","","",
                        "","","","",   "<0,-4,0.95>SA","","","",
                        "","","","",   "<-4,0,0.95>SA","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "<24>MoveBox2","","","",   "<240,-90>MoveLine(<0,4,0.95>SA)","","","",
                        "","","","",   "<400,90>MoveLine(<4,0,0.95>SA)","","","",
                        "","","","",   "<240,-90>MoveLine(<0,-4,0.95>SA)","","","",
                        "","","","",   "<400,90>MoveLine(<-4,0,0.95>SA)","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                    });
                
            }
            void Effect2()
            {
                RegisterFunctionOnce("Lines1",()=>{
                    var e1 = LinkEase(Stable(0, -16, 0),
                        EaseOut(BeatTime(4),new V(310,0),EaseState.Cubic),
                        EaseIn(BeatTime(4), new V(-80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(220, 0), new V(220+130+130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(220 + 130 + 130, 0), new V(220, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(220, 0), new V(220 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(220 + 130 + 130, 0), new V(-70, 0), EaseState.Quad)
                        );
                    var e2 = LinkEase(Stable(BeatTime(1), -16, 0),
                        EaseOut(BeatTime(4), new V(330, 0), EaseState.Cubic),
                        EaseIn(BeatTime(3), new V(-80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(240, 0), new V(240 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(240 + 130 + 130, 0), new V(240, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(240, 0), new V(240 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(240 + 130 + 130, 0), new V(-50, 0), EaseState.Quad)
                        );
                    var e3 = LinkEase(Stable(BeatTime(2), -16, 0),
                        EaseOut(BeatTime(4), new V(350, 0), EaseState.Cubic),
                        EaseIn(BeatTime(2), new V(-80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(260, 0), new V(260 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(260 + 130 + 130, 0), new V(260, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(260, 0), new V(260 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(260 + 130 + 130, 0), new V(-30, 0), EaseState.Quad)
                        );
                    var e4 = LinkEase(Stable(BeatTime(3), -16, 0),
                        EaseOut(BeatTime(4), new V(370, 0), EaseState.Cubic),
                        EaseIn(BeatTime(1), new V(-80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(280, 0), new V(280 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(280 + 130 + 130, 0), new V(280, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(280, 0), new V(280 + 130 + 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(280 + 130 + 130, 0), new V(-10, 0), EaseState.Quad)
                        );
                    Line l1 = new(e1, Stable(0, 90)) { Alpha = 0.6f };
                    Line l2 = new(e2, Stable(0, 90)) { Alpha = 0.5f };
                    Line l3 = new(e3, Stable(0, 90)) { Alpha = 0.4f };
                    Line l4 = new(e4, Stable(0, 90)) { Alpha = 0.2f };
                    CreateEntity(l1, l2, l3, l4);
                    l1.DelayDispose(BeatTime(16f));
                    l2.DelayDispose(BeatTime(16f));
                    l3.DelayDispose(BeatTime(16f));
                    l4.DelayDispose(BeatTime(16f));
                });
                RegisterFunctionOnce("Lines2", () => {
                    var e1 = LinkEase(Stable(0, 656, 0),
                        EaseOut(BeatTime(4), new V(-310, 0), EaseState.Cubic),
                        EaseIn(BeatTime(4), new V(80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(420, 0), new V(420 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(420 - 130 - 130, 0), new V(420, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(420, 0), new V(420 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(420 - 130 - 130, 0), new V(710, 0), EaseState.Quad)
                        );
                    var e2 = LinkEase(Stable(BeatTime(1), 656, 0),
                        EaseOut(BeatTime(4), new V(-330, 0), EaseState.Cubic),
                        EaseIn(BeatTime(3), new V(80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(400, 0), new V(400 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(400 - 130 - 130, 0), new V(400, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(400, 0), new V(400 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(400 - 130 - 130, 0), new V(690, 0), EaseState.Quad)
                        );
                    var e3 = LinkEase(Stable(BeatTime(2), 656, 0),
                        EaseOut(BeatTime(4), new V(-350, 0), EaseState.Cubic),
                        EaseIn(BeatTime(2), new V(80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(380, 0), new V(380 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(380 - 130 - 130, 0), new V(380, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(380, 0), new V(380 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(380 - 130 - 130, 0), new V(670, 0), EaseState.Quad)
                        );
                    var e4 = LinkEase(Stable(BeatTime(3), 656, 0),
                        EaseOut(BeatTime(4), new V(-370, 0), EaseState.Cubic),
                        EaseIn(BeatTime(1), new V(80, 0), EaseState.Cubic),
                        EaseInOut(BeatTime(2), new V(360, 0), new V(360 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(360 - 130 - 130, 0), new V(360, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(360, 0), new V(360 - 130 - 130, 0), EaseState.Quad),
                        EaseInOut(BeatTime(2), new V(360 - 130 - 130, 0), new V(650, 0), EaseState.Quad)
                        );
                    Line l1 = new(e1, Stable(0, 90)) { Alpha = 0.6f };
                    Line l2 = new(e2, Stable(0, 90)) { Alpha = 0.5f };
                    Line l3 = new(e3, Stable(0, 90)) { Alpha = 0.4f };
                    Line l4 = new(e4, Stable(0, 90)) { Alpha = 0.2f };
                    CreateEntity(l1, l2, l3, l4);
                    l1.DelayDispose(BeatTime(16f));
                    l2.DelayDispose(BeatTime(16f));
                    l3.DelayDispose(BeatTime(16f));
                    l4.DelayDispose(BeatTime(16f));
                });

                CreateChart(BeatTime(4), BeatTime(2), 5.6f, new string[]
                    {
                        "Lines1(<2,-3>Drum)","","","",   "","","","",
                        "","","","",   "","","","",
                        "<0>SCR","","","",   "","","","",
                        "","","","",   "","","","",

                        "<0,3,0.9>SA","","","",   "","","","",
                        "<3,0,0.9>SA","","","",   "","","","",
                        "<0,-3,0.9>SA","","","",   "","","","",
                        "<-3,0,0.9>SA","","","",   "","","","",

                        "Lines2(<2,3>Drum)","","","",   "","","","",
                        "","","","",   "","","","",
                        "<0>SCR","","","",   "","","","",
                        "","","","",   "","","","",

                        "<0,3,0.9>SA","","","",   "","","","",
                        "<3,0,0.9>SA","","","",   "","","","",
                        "<0,-3,0.9>SA","","","",   "","","","",
                        "<-3,0,0.9>SA","","","",   "","","","",
                        //
                        "Lines1(Lines2)(<2,-3>Drum)","","","",   "","","","",
                        "","","","",   "","","","",
                        "<0>SCR","","","",   "","","","",
                        "","","","",   "","","","",

                        "<0,3,0.9>SA","","","",   "","","","",
                        "<3,-3,0.9>SA","","","",   "","","","",
                        "<-3,3,0.9>SA","","","",   "","","","",
                        "<3,0,0.9>SA","","","",   "","","","",

                        "Lines1(Lines2)(<2,3>Drum)","","","",   "","","","",
                        "","","","",   "","","","",
                        "<0>SCR","","","",   "","","","",
                        "","","","",   "","","","",

                        "<0,3,0.9>SA","","","",   "","","","",
                        "<3,-3,0.9>SA","","","",   "","","","",
                        "<-3,3,0.9>SA","","","",   "","","","",
                        "<3,0,0.9>SA","","","",   "","","","",
                        //
                    });

            }
            void Effect3()
            {
                RegisterFunctionOnce("Move1", () =>
                {
                    RunEase((s) =>
                    {
                        InstantSetBox(s,84,84);
                        InstantTP(s);
                        ScreenDrawing.ScreenPositionDetla = new V(320, 240) - s;
                    },
                    Stable(0,320,240),
                    EaseOut(T(2),new Vector2(0,-40),EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, -40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, -40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, -40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, 80), EaseState.Quad),
                    Stable(T(6), 320, 80),
                    EaseOut(T(2), new Vector2(0, 80), EaseState.Quad)                
                    );
                });
                RegisterFunctionOnce("Move2", () =>
                {
                    RunEase((s) =>
                    {
                        InstantSetBox(s, 84, 84);
                        InstantTP(s);
                        ScreenDrawing.ScreenPositionDetla = new V(320, 240) - s;
                    },
                    Stable(0, 320, 240),
                    EaseOut(T(2), new Vector2(0, 40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, 40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, 40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, 40), EaseState.Quad),
                    EaseOut(T(2), new Vector2(0, -80), EaseState.Quad),
                    Stable(T(6), 320, 320),
                    EaseOut(T(2), new Vector2(0, -80), EaseState.Quad)
                    );
                });
                CreateChart(BeatTime(4), BeatTime(2), 5.6f, new string[]
                    {
                        "Move1","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                        "Move2","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                    });

            }
            void Effect4()
            {
                RegisterFunctionOnce("Block", () =>
                {
                    float r = Rand(0, 359);

                    var let = LinkEase(Stable(0, 0), EaseOut(T(1), 60, EaseState.Quad));
                    EaseUnit<float> Rot(int times)
                    {
                        if (times % 4 == 0) return LinkEase(Stable(0, r), EaseOut(T(1), -90, EaseState.Quint));
                        if (times % 4 == 1) return LinkEase(Stable(0, r + 90), EaseOut(T(1), -90, EaseState.Quint));
                        if (times % 4 == 2) return LinkEase(Stable(0, r + 180), EaseOut(T(1), -90, EaseState.Quint));
                        else return LinkEase(Stable(0, r + 270), EaseOut(T(1), -90, EaseState.Quint));
                    }
                    V ct = new(Arguments[0], Arguments[1]);
                    var p1 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(0)),
                            Stable(1145, ct))
                        );
                    var p2 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(1)),
                            Stable(1145, ct))
                        );
                    var p3 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(2)),
                            Stable(1145, ct))
                        );
                    var p4 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(3)),
                            Stable(1145, ct))
                        );
                    Line l1 = new(p1, p2);
                    Line l2 = new(p2, p3);
                    Line l3 = new(p3, p4);
                    Line l4 = new(p4, p1);
                    CreateEntity(l1, l2, l3, l4);
                    l1.AlphaDecrease(T(2));
                    l2.AlphaDecrease(T(2));
                    l3.AlphaDecrease(T(2));
                    l4.AlphaDecrease(T(2));
                });
                RegisterFunctionOnce("Block1", () =>
                {
                    float r = Rand(0, 359);
               
                    var let = LinkEase(Stable(0,0), EaseOut(T(1), 60, EaseState.Quad));
                    EaseUnit<float> Rot(int times)
                    {
                        if (times % 4 == 0) return LinkEase(Stable(0, r), EaseOut(T(1), 90, EaseState.Quint));
                        if (times % 4 == 1) return LinkEase(Stable(0, r+90), EaseOut(T(1), 90, EaseState.Quint));
                        if (times % 4 == 2) return LinkEase(Stable(0, r+180), EaseOut(T(1), 90, EaseState.Quint));
                        else return LinkEase(Stable(0, r + 270), EaseOut(T(1), 90, EaseState.Quint));
                    }
                    V ct = new(R(100, 540), R(100, 380));
                    var p1 = LinkEase(
                        Stable(0,ct),
                        Add(
                            Polar(let,Rot(0)),
                            Stable(1145,ct))
                        );
                    var p2 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(1)),
                            Stable(1145, ct))
                        );
                    var p3 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(2)),
                            Stable(1145, ct))
                        );
                    var p4 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(3)),
                            Stable(1145, ct))
                        );
                    Line l1 = new(p1, p2);
                    Line l2 = new(p2, p3);
                    Line l3 = new(p3, p4);
                    Line l4 = new(p4, p1);
                    CreateEntity(l1,l2,l3,l4);
                    l1.AlphaDecrease(T(2));
                    l2.AlphaDecrease(T(2));
                    l3.AlphaDecrease(T(2));
                    l4.AlphaDecrease(T(2));
                });
                RegisterFunctionOnce("Block2", () =>
                {
                    float r = Rand(0, 359);

                    var let = LinkEase(Stable(0, 0), EaseOut(T(1), 60, EaseState.Quad));
                    EaseUnit<float> Rot(int times)
                    {
                        if (times % 4 == 0) return LinkEase(Stable(0, r), EaseOut(T(1), -90, EaseState.Quint));
                        if (times % 4 == 1) return LinkEase(Stable(0, r + 90), EaseOut(T(1), -90, EaseState.Quint));
                        if (times % 4 == 2) return LinkEase(Stable(0, r + 180), EaseOut(T(1), -90, EaseState.Quint));
                        else return LinkEase(Stable(0, r + 270), EaseOut(T(1), -90, EaseState.Quint));
                    }
                    V ct = new(R(100, 540), R(100, 380));
                    var p1 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(0)),
                            Stable(1145, ct))
                        );
                    var p2 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(1)),
                            Stable(1145, ct))
                        );
                    var p3 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(2)),
                            Stable(1145, ct))
                        );
                    var p4 = LinkEase(
                        Stable(0, ct),
                        Add(
                            Polar(let, Rot(3)),
                            Stable(1145, ct))
                        );
                    Line l1 = new(p1, p2);
                    Line l2 = new(p2, p3);
                    Line l3 = new(p3, p4);
                    Line l4 = new(p4, p1);
                    CreateEntity(l1, l2, l3, l4);
                    l1.AlphaDecrease(T(2));
                    l2.AlphaDecrease(T(2));
                    l3.AlphaDecrease(T(2));
                    l4.AlphaDecrease(T(2));
                });
                CreateChart(BeatTime(4), BeatTime(2), 5.6f, new string[]
                    {   
                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",
                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",

                        "Block1","","!!6/3","<270,120>Block","<240,200>Block","<280,280>Block",   "<230,360>Block","","","",
                        "Block2","","","",   "","","","",
                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",

                        "Block1","","!!6/3","<370,360>Block","<400,280>Block","<360,200>Block",   "<410,120>Block","","","",
                        "Block2","","","",   "","","","",
                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",

                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",
                        "Block1","","","",   "","","","",
                        "Block2","","","",   "","","","",
                        //
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",

                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        "","","","",   "","","","",
                        //
                    });

            }
            void Effect5()
            {
                RegisterFunctionOnce("PL", () =>
                {
                    Line l = new(LinkEase(Stable(0, 0, 0), EaseOut(BeatTime(1.5f), new V(0, 0), new V(645, 0), EaseState.Cubic)), Stable(0, 90));
                    CreateEntity(l);
                    l.DelayAlphaDecrease(BeatTime(1), BeatTime(0.5f));
                    l.Alpha = 0.7f-Arguments[0]/10f;
                });
                RegisterFunctionOnce("PR", () =>
                {
                    Line l = new(LinkEase(Stable(0, 640, 0), EaseOut(BeatTime(1.5f), new V(640, 0), new V(-5, 0), EaseState.Cubic)), Stable(0, 90));
                    CreateEntity(l);
                    l.DelayAlphaDecrease(BeatTime(1), BeatTime(0.5f));
                    l.Alpha = 0.7f - Arguments[0] / 10f;
                });
                CreateChart(BeatTime(4), BeatTime(2), 5.6f, new string[]
                    {
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",

                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",

                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",

                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        //
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",

                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",

                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",

                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        "<0>PL","<1>PL","<2>PL","<3>PL",   "<4>PL","","","",
                        "<0>PR","<1>PR","<2>PR","<3>PR",   "<4>PR","","","",
                        //
                    });

            }
          
            public float T(float time)
            {
                return BeatTime(time);
            }
            public float R(float left,float right)
            {
                return Rand(left, right);
            }
            public V GV(float lt,float rt)
            {
                return MathUtil.GetVector2(lt, rt);
            }
            public void Start()
            {
                RegisterFunction("SA", () =>
                {
                    RunEase((s) =>
                    {
                        ScreenDrawing.ScreenAngle = s;
                    },Stable(0,Arguments[0]),EaseOut(BeatTime(Arguments[2]), Arguments[0], Arguments[1], EaseState.Quad));
                });
                RegisterFunction("Drum", () =>
                {
                    ScreenDrawing.ScreenAngle = 0;
                    float time = Arguments[0];
                    RunEase((s) =>
                    {
                        ScreenDrawing.ScreenAngle = s;
                    },
                    EaseOut(BeatTime(time) / 4f, Arguments[1], EaseState.Quad),
                    EaseIn(BeatTime(time) / 4f * 3, -Arguments[1], EaseState.Quad)
                    );
                    //Delay(time+2, () => { ScreenDrawing.ScreenAngle = 0; });
                });
                RegisterFunction("SCR", () =>
                {
                    ScreenDrawing.ScreenAngle = Arguments[0];
                });
                Settings.GreenTap = true;
                HeartAttribute.MaxHP = 188;
                HeartAttribute.DamageTaken = 30;
                InstantSetBox(new Vector2(320, 240), 84f, 84f);
                SetSoul(1);
                TP();
                GametimeDelta = -311 / 1000f * 62.5f + BeatTime(1);
                //bool jump = true;

                bool jump = false;
                HeartAttribute.ArrowFixed = true;
                if (jump)
                { 
                    int beat = 127;
                    GametimeDelta = -4.4f + BeatTime(beat);
                    PlayOffset = BeatTime(beat);
                    ScreenDrawing.MasterAlpha = 1f;
                    ScreenDrawing.ScreenScale = 1f;
                }
            }
        }
    }
}