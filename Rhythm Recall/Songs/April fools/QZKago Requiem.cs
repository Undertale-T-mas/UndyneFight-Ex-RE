using Extends;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;
using UndyneFight_Ex;
using UndyneFight_Ex.Entities;
using UndyneFight_Ex.SongSystem;
using static UndyneFight_Ex.Entities.EasingUtil;
using static UndyneFight_Ex.Entities.SimplifiedEasing;
using static UndyneFight_Ex.Fight.Functions;
using static UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders;

namespace Rhythm_Recall.Waves
{
    internal class QZKago : IChampionShip
    {
        Dictionary<string, Difficulty> dif = new();
        public QZKago()
        {
            dif.Add("Div.3", Difficulty.Easy);
            dif.Add("Div.2", Difficulty.Normal);
            dif.Add("Div.1", Difficulty.Extreme);
        }
        public IWaveSet GameContent => new Project();
        public Dictionary<string, Difficulty> DifficultyPanel => dif;
        class Project : WaveConstructor, IWaveSet
        {
            public Project() : base(62.5f / (257f / 60f)) { }
            public string Music => "QZKago Requiem";
            public string FightName => "QZKago Requiem";
            public SongInformation Attributes => new Information();
            class Information : SongInformation
            {
                public override string SongAuthor => "t+pazolite";
                public override string BarrageAuthor => "2.Kvon.0";
                public override string AttributeAuthor => "On.or.Kz";
                public Information() { this.MusicOptimized = true; }
                public override Dictionary<Difficulty, float> CompleteDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {
                        new(Difficulty.Easy,0f),
                        new(Difficulty.Normal,0f),
                        new(Difficulty.Extreme,0f),
                    }
                );
                public override Dictionary<Difficulty, float> ComplexDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {
                        new(Difficulty.Easy,0f),
                        new(Difficulty.Normal,0f),
                        new(Difficulty.Extreme,0f),
                    }
                );
                public override Dictionary<Difficulty, float> APDifficulty => new(
                    new KeyValuePair<Difficulty, float>[]
                    {
                        new(Difficulty.Easy,0f),
                        new(Difficulty.Normal,0f),
                        new(Difficulty.Extreme,0f),
                    }
                );
            }
            public static Game game;
            GlobalResources.Effects.StepSampleShader StepSample;
            private bool notRegistered = true;
            ScreenDrawing.Shaders.Blur Blur;
            RenderProduction production, production1, production2;
            ScreenDrawing.Shaders.RGBSplitting splitter = new();
            GlobalResources.Effects.PolarShader Polar;
            public void Easy()
            {

            }

            public void Extreme()
            {
                if (InBeat(2))
                {
                    CreateChart(BeatTime(2), BeatTime(1), 6.5f, new string[]
                    {
                        "($0)(#3#+21)","","","",    "","","","",    "*d","","","",    "","","","",
                        "*d","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+2)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "(d)(#3#+21)","","","",    "","","","",    "*d","","","",    "","","","",
                        "*d","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+2)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        ////16
                        "(d1)(#3#+2)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "(d)(#3#+21)","","","",    "","","","",    "*d","","","",    "","","","",
                        "","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+2)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "~+01'1.4","","~+01'1.4","",    "~+01'1.4","","~+01'1.4","",    "~+01'1.4","","","",    "~+01'1.4","","","",
                        "(~+01'1.4)(*+0)","","","",    "~+01'1.4","","","",    "*d","","","",    "","","","",
                        ////32
                        "($0)(#3#+01)","","","",    "","","","",    "*d","","","",    "","","","",
                        "*d","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+0)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "(d)(#3#+01)","","","",    "","","","",    "*d","","","",    "","","","",
                        "*d","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+0)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        ////48
                        "(d1)(#3#+0)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "(d)(#3#+01)","","","",    "","","","",    "*d","","","",    "","","","",
                        "*d","","","",    "","","","",    "*d","","","",    "","","","",
                        //
                        "(d1)(#3#+0)","","","",    "","","","",    "*d1","","","",    "","","","",
                        "*d1","","","",    "","","","",    "*d1","","","",    "","","","",
                        //
                        "*d","","","",    "*+0","","","",    "*d1","","","",    "*+01","","","",
                        "(*$2)(*$01)","","(~_$2'1.4)(~_$01'1.4)","",    "(~_$2'1.4)(~_$01'1.4)","","(~_$2'1.4)(~_$01'1.4)","",    "(~_$2'1.4)(~_$01'1.4)","","(~_$2'1.4)(~_$01'1.4)","",    "(~_$2'1.4)(~_$01'1.4)","","(~_$2'1.4)(~_$01'1.4)","",
                        ////64
                    });
                }
                if (InBeat(4 * 16))
                {
                    CreateChart(BeatTime(4), BeatTime(2), 7f, new string[]
                    {
                        "*d","","*+0","",    "*d1","","*+01","",    "*d","","*+0","",    "$11","-11","+11","-11",
                        "+11","","$1","+1",    "-1","","*+0","",    "*d1","","*+01","",    "$2","-1","+1","-1",
                        //
                        "+1","","*+0","",    "*d1","","*+01","",    "*d","","*+0","",    "$01","+11","-11","+11",
                        "-11","","*+01","",    "!!8","+01","+01'1.8","+01","+01'1.8","+01","","","",    "!!8","*d","","","","+0","+0'1.8","+0","",    "!!8","+0","","","","*d1","+01'1.8","+01","+01'1.8",
                        //
                        "+01","","+01","",    "*d","","*+0","",    "*d1","","*+01","",    "$1","+1","-1","+1",
                        "-1","","$11","-11",    "+11","","*+01","",    "*d","","*+0","",    "$21","-11","+11","-11",
                        //
                        "+11","","*+01","",    "!!8","+01","+01'1.8","+01","+01'1.8","+01","","","",    "!!8","*d","","","","+0","+0'1.8","+0","",    "!!8","+0","","","","*$31","+01'1.8","+01","+01'1.8",
                        "(+2)(+21)","","-1","",    "(+1)(+21)","","-1","",    "(+1)(+21)","","","",    "($101)($311)","","","",
                        ////32
                        "*d","","*+0","",    "*d1","","*+01","",    "*d","","*+0","",    "$11","-11","+11","-11",
                        "+11","","$1","+1",    "-1","","*+0","",    "*d1","","*+01","",    "$2","-1","+1","-1",
                        //
                        "+1","","*+0","",    "*d1","","*+01","",    "*d","","*+0","",    "$01","+11","-11","+11",
                        "-11","","*+01","",    "!!8","+01","+01'1.8","+01","+01'1.8","+01","","","",    "!!8","*d","","","","+0","+0'1.8","+0","",    "!!8","+0","","","","*d1","+01'1.8","+01","+01'1.8",
                        //
                        "($2)($3)","","($2)($3)","",    "($2)($3)","","($2)($3)","",    "($2)($3)","","($2)($3)","",    "*$31","","","",
                        "($01)($11)","","($01)($11)","",    "($01)($11)","","($01)($11)","",    "*$0","","","",    "*$01","","","",
                        //
                        "(*$31)(*$1)","","(*$31)(*$1)","",    "(*$21)(*$0)","","(*$21)(*$0)","",    "(*$11)(*$3)","","(*$11)(*$3)","",    "(*$01)(*$2)","","(*$01)(*$2)","",
                        "($01)($31)","","","",    "($1)($2)","","","",    "($01)($21)","","","",    "($001)($201)","","","",
                        ////64
                    });
                }
                if (InBeat(4 * 32))
                {
                    CreateChart(BeatTime(4), BeatTime(1), 7, new string[]
                    {
                        "(#0.5#d)","","","",    "(+01)","","","",    "(#0.5#d)","","","",    "(+01)","","","",
                        "(#0.5#d)","","","",    "(+01)","","","",    "(#0.5#d)","","","",    "(+01)","","","",
                        //
                        "(#0.5#d)","","","",    "(+01)","","","",    "(#0.5#d)","","","",    "(+01)","","","",
                        "(#0.5#d)","","","",    "(+01)","","","",    "(#0.5#d)","","","",    "(+01)","","","",
                        //
                        "(#7.2#$1)","","","",    "","","","",    "$2","","","",    "","","","",
                        "$3","","","",    "","","","",    "$0","","","",    "","","","",
                        //
                        "$3","","","",    "","","","",    "$2","","","",    "","","","",
                        "$3","","","",    "","","","",    "($1)($1)","","","",    "","","","",
                        ////16
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        //
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        //
                        "(#3.7#$11)","","","",    "","","","",    "$01","","","",    "","","","",
                        "$31","","","",    "","","","",    "$21","","","",    "","","","",
                        //
                        "(#1.7#$11)","","","",    "","","","",    "$3","","","",    "","","","",
                        "(#1.7#$1)","","","",    "","","","",    "$31","","","",    "","","","",
                        ////32
                        "(#1.4#$21)(#1.4#$3)","","","",    "","","","",    "","","","",    "(#1.4#$21)(#1.4#$0)","","","",
                        "","","","",    "","","","",    "(#1.4#$11)(#1.4#$0)","","","",    "","","","",
                        //
                        "","","","",    "(#1.4#$01)(#1.4#$0)","","","",    "+01","","","",    "","","","",
                        "+0","","","",    "","","","",    "","","","",    "","","","",
                        //
                        "(#1.7#$1)","","","",    "","","","",    "$21","","","",    "","","","",
                        "(#1.7#$11)","","","",    "","","","",    "$0","","","",    "","","","",
                        //
                        "(*N11)(*-1)","","","",    "(*+0)","","","",    "(*+0)(*+1)","","","",    "(*+01)","","","",
                        "(+01)(+01)","","","",    "","","","",    "(+2)(+0)","","","",    "","","","",
                        ////48
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        "(#0.5#d1)","","","",    "(+0)","","","",    "(#0.5#d1)","","","",    "(+0)","","","",
                        //
                        "$01","","","",    "$2","","","",    "$31","","","",    "$3","","","",
                        "($01)($01)","","","",    "($2)($2)","","","",    "($31)($31)","","","",    "($3)($3)","","","",
                        //
                        "(#4#$01)","","","",    "","","","",    "","","","",    "","","","",
                        "","","","",    "","","","",    "","","","",    "","","","",
                        //
                        "(#4#$3)","","","",    "","","","",    "","","","",    "","","","",
                        "","","","",    "","","","",    "","","","",    "","","","",
                        ////64
                    });
                }
            }

            public void ExtremePlus()
            {

            }

            public void Hard()
            {

            }

            public void Noob()
            {

            }

            public void Normal()
            {

            }
            public void Start()
            {
                production = Blur = new Blur(0.505f);
                production1 = new Filter(FightResources.Shaders.StepSample, 0.51f);
                splitter = new RGBSplitting(0.9f) { Disturbance = false };
                StepSample = FightResources.Shaders.StepSample;
                Blur.Sigma = 0f;
                StepSample.Intensity = 0.0f;
                StepSample.CentreX = 320f;
                StepSample.CentreY = 240f;
                splitter.Intensity = 0.0f;
                ScreenDrawing.SceneRendering.InsertProduction(production);
                ScreenDrawing.SceneRendering.InsertProduction(production1);
                ScreenDrawing.SceneRendering.InsertProduction(splitter);

                SetSoul(1);
                InstantTP(new(320, 240));
                SetGreenBox();
                HeartAttribute.MaxHP = 16;
                ScreenDrawing.HPBar.HPLoseColor = Color.DarkBlue;
                ScreenDrawing.HPBar.HPExistColor = Color.Blue * 0.7f;
                Settings.GreenTap = true;
                HeartAttribute.ArrowFixed = true;

                GametimeDelta = -0.01f;
                bool jump = false;
                if (jump)
                {
                    int beat = 4 * 32;
                    //int beat = 4 * 15;
                    GametimeDelta = BeatTime(-4 + beat);
                    PlayOffset = BeatTime(beat - 4);
                    ScreenDrawing.ScreenScale = 1f;
                }
            }
        }
    }
}
